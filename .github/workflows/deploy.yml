name: ci/cd

on:
  push:
    branches:
      - main # se aplicará sobre la rama que se indique

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: ${{ secrets.SSH_USER }}
      NAME_APPLICATION: "subidor"

    steps:
      # Paso 1: 
      - name: Checkout code
        uses: actions/checkout@v3

      # Paso 2: 
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # Paso 3: construimos la imagen docker
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/${NAME_APPLICATION}:${{ github.sha }} .
      
      # Paso 4: subimos la imagen generada a docker hub
      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${NAME_APPLICATION}:${{ github.sha }}

      # Paso 5: en caso de no tener un host conocido, conectamos ssh e incorporamos 
      #         la llave pública en el serservidor remoto
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      # Paso 6: Desplegamos la imagen docker en el servidor remoto
      - name: Deploy to VPS
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} <<EOF
          # Detener el contenedor anterior si existe
          docker stop ${NAME_APPLICATION} || true
          docker rm ${NAME_APPLICATION} || true

          # Eliminar la imagen anterior si existe
          docker rmi ${{ secrets.DOCKER_HUB_USERNAME }}/${NAME_APPLICATION}:${{ github.sha }} || true

          # Descargar la nueva imagen desde Docker Hub
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/${NAME_APPLICATION}:${{ github.sha }}

          # Ejecutar el nuevo contenedor
          docker run -d --name ${NAME_APPLICATION} -p 80:3001 ${{ secrets.DOCKER_HUB_USERNAME }}/${NAME_APPLICATION}:${{ github.sha }}
          EOF

          